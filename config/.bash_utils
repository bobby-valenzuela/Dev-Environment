#!/usr/bin/env bash

UTILS_LOADED=1

# ____________________ GENERAL ______________________

# Get side-by-side diff only showing diffs
diffy(){
    diff $1 $2 -y --color --suppress-common-lines
}

# cd + ls
tere() {
    local result=$(command tere "$@")
    [ -n "$result" ] && cd -- "$result"
}

clear_nvim_swaps(){
    find ~/.local/state/nvim/swap -iname "*.swp" -exec rm -v '{}' \;
}

y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	# yz "$@" --cwd-file="$tmp" # Using local yazi in /usr/local/bin/yz
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

docx_to_md(){
    [[ ! "$1" =~ .docx$ ]] && echo "File must be in .docx format" && exit
    pandoc -s $1 -f docx -t commonmark --extract-media=. -o output.md
}

update_lazy(){
    sudo apt install ninja-build gettext cmake unzip curl git
    git clone https://github.com/neovim/neovim
    cd neovim
    git checkout stable
    make CMAKE_BUILD_TYPE=Release
    sudo make install
}

create_and_assume_user(){
    [[ ! -z "$1" ]] && echo "[!] Requires username as an argument" && exit
    sudo useradd -m $1 && sudo usermod -aG sudo $1 && sudo passwd $1 && sudo -i -u $1
}

edit_nvim_conf(){
    nvim ~/.config/nvim/lua/
}

# Download MP3 audio from youtube URL
mp3_dl () {
        if [[ -s /usr/local/bin/yt-dlp ]]
        then
                sudo yt-dlp -t mp3 $1
        else
                youtube-dl -x --audio-format mp3 $1
        fi
}

# Copy from WSL to Windows host
wcp(){

    WIN_FOLDER=/mnt/c/Users/BobbyValenzuela/Downloads/WSL/
    WSL_FOLDER=~/WIN/

    [ ! -d $WIN_FOLDER ] && mkdir -p $WIN_FOLDER
    [ ! -d $WSL_FOLDER ] && mkdir -p $WSL_FOLDER

    # Get the full path of the file
    full_path=$(realpath "$1" 2>/dev/null || readlink -f "$1" 2>/dev/null)
    full_path=$(realpath "$$1" 2>/dev/null || readlink -f "$$1" 2>/dev/null)

    DEST=



    # Check if full_path is not empty
    if [ -n "$full_path" ]; then
    
        # if there's a path, use that 
        if [[ ! -z "$2" ]]; then
            DEST=$2
        else

            # If this is a windows file, send to WSL folder
            if [[ "$full_path" == /mnt/c/* ]]; then
                DEST=$WSL_FOLDER
            else
                DEST=$WIN_FOLDER
            fi

        fi
            # Now that we have a destination set, copy to DEST
            cp -r -v $1 $DEST

    else
        echo "Error: File '$file' does not exist or cannot be resolved."
    fi
}


# ____________________ WORKFLOW-SPECIFIC ______________________
tmux_init(){
    bash ~/.tmux_init.sh 2>/dev/null
    tmux attach-session -t Main 2>/dev/null
}

tt(){
   cd ~/my_repos/Tomahawk/
   ~/my_repos/Tomahawk/tomahawk
}

config_update_and_nvim_update(){
    config_update 'update-nvim'
}
config_update(){
    # Gets latest config files in repo (which has been cloned) and updates local files

    LOCAL_REPO=~/my_repos/Dev-Environment

    if [[ ! -d $LOCAL_REPO/ ]]; then
        echo "[!] Repo does not exist! Cloning and updating..."
        cd $HOME/my_repos/
        sh -c "$(wget https://raw.githubusercontent.com/bobby-valenzuela/Dev-Environment/refs/heads/main/init_configonly.sh -O -)"
    else

        if [[ ! -d $LOCAL_REPO/config/ ]]; then
            mkdir -p $LOCAL_REPO/config/
        fi

        cd $LOCAL_REPO
        # Save any unsaved changed and pull down the latest
        git stash save
        git pull
        ./install.sh configonly
    fi


    # Nvim is already updated - only continue if we want to keep revert back to current nvim
    if [[ "$1" = "update-nvim" ]]; then
        return
    fi

    # [+] Restore main nvim profile
    # At this point our nvim config would have been moved to nvim-backup and a fresh install would be in place
    # Revert that if we're not interested in updated nvim
    if [ -d ~/.config/nvim-new ]; then
        rm -rf ~/.config/nvim-new
    fi
    mv ~/.config/nvim ~/.config/nvim-new
    mv ~/.config/nvim-backup ~/.config/nvim

    # Restore cache
    rm -rf ~/.local/share/nvim/
    mv ~/.local/share/nvim-backup ~/.local/share/nvim

}

config_save(){
    # Copies all of my main config files into my git dir so i can push them up later as needed
    LOCAL_REPO=~/my_repos/Dev-Environment

    # Sync local config files with cloned repo so i can push up my changes
    if [[ ! -d $LOCAL_REPO/config/ ]]; then
        mkdir -p $LOCAL_REPO/config/
    fi
    DEST=$LOCAL_REPO/config/

    # Ensure $DEST is set and is a valid directory
    if [ -z "$DEST" ] || [ ! -d "$DEST" ]; then
      echo "Error: Directory $DEST is not set or is not a valid directory."
      return 1
    fi

    printf "Running...\n"

    # FILES
    cp -v ~/.bash_aliases  $DEST
    cp -v ~/.bash_git  $DEST
    cp -v ~/.bash_pbx  $DEST
    cp -v ~/.bash_utils  $DEST
    cp -v ~/.bashrc  $DEST
    # cp -v -r ~/.oh-my-zsh  $DEST
    cp -v ~/.p10k.zsh  $DEST
    cp -v ~/.tmux.conf  $DEST
    cp -v ~/.vimrc  $DEST
    cp -v ~/.zshrc   $DEST
    cp -v ~/.zsh_customizations   $DEST
    cp -v ~/.tmux_init.sh  $DEST
    # DIRS
    cp -v -r ~/.config/spotify-player/  $DEST.config/
    cp -v -r ~/.config/lazydocker/  $DEST.config/
    cp -v -r ~/.config/lazygit/  $DEST.config/
    cp -v -r ~/.config/nvim/  $DEST.config/
    cp -v -r ~/.config/nvim-lazy/  $DEST.config/
    cp -v -r ~/.config/posting/  $DEST.config/
    sudo cp -v -r ~/.config/yazi/  $DEST.config/

    # cp -v -r ~/.config/  $DEST
    #    cp -v -r ~/.local/share/nvim/dadbod_ui/  $DEST

    DEST=$LOCAL_REPO/
    cp -v -r ~/posting/  $DEST


    # NEW - Copy custom files from /usr/local/bin/
    DEST=$LOCAL_REPO/config/usr_local_bin/
    # cp /usr/local/bin/* $DEST

    if [[ ! -d $LOCAL_REPO/config/usr_local_bin/ ]]; then
        mkdir -p $LOCAL_REPO/config/usr_local_bin/
    fi

    sudo cp -r /usr/local/bin/chatgpt $DEST
    sudo cp -r /usr/local/bin/dirsync $DEST
    sudo cp -r /usr/local/bin/grok $DEST
    sudo cp -r /usr/local/bin/postboy $DEST
    sudo cp -r /usr/local/bin/posty $DEST
    sudo cp -r /usr/local/bin/quickconnect $DEST
    sudo cp -r /usr/local/bin/reposync $DEST
    sudo cp -r /usr/local/bin/restarthive.sh $DEST
    sudo cp -r /usr/local/bin/tomahawk $DEST
    sudo cp -r /usr/local/bin/update_aws_creds.sh $DEST
    sudo cp -r /usr/local/bin/vscode-cleanup $DEST
    sudo cp -r /usr/local/bin/vscode-cleanup-pbx $DEST

    # OLD - Copy all files (less than 100MB) in /usr/local/bin
    # Maximum file size in bytes (100 MB = 100 * 1024 * 1024 bytes)
    # max_size=$((100 * 1024 * 1024))

    # # Loop through each file in /usr/local/bin (not directories, not recursive)
    # for file in /usr/local/bin/*; do
    #     # Get file size in bytes
    #     file_size=$(stat -c %s "$file" 2>/dev/null)
    #     if [ -z "$file_size" ]; then
    #       echo "Warning: Could not determine size of $file, skipping."
    #       continue
    #     fi
    #     # Check if file size is less than 100 MB
    #     if [ $file_size -lt $max_size ]; then
    #       echo "Copying $file (size: $((file_size / 1024 / 1024)) MB)"
    #       sudo cp -r "$file" "$DEST"
    #       if [ $? -ne 0 ]; then
    #         echo "Error: Failed to copy $file."
    #         # exit 1
    #       fi
    #     else
    #       echo "Skipping $file (size: $((file_size / 1024 / 1024)) MB, exceeds 100 MB)"
    #     fi
    # done

     echo "Done!"
}

config_sync_alpha(){

    # Sync local config files with cloned repo so i can push up my changes
    scp ~/.bash_aliases  alpha:/home/ubuntu/
    scp ~/.bash_git  alpha:/home/ubuntu/
    scp ~/.bash_pbx  alpha:/home/ubuntu/
    scp ~/.bash_utils  alpha:/home/ubuntu/
    scp ~/.bashrc  alpha:/home/ubuntu/
    #scp -r ~/.oh-my-zsh  alpha:/home/ubuntu/
    scp ~/.p10k.zsh  alpha:/home/ubuntu/
    scp ~/.tmux.conf  alpha:/home/ubuntu/
    scp ~/.vimrc  alpha:/home/ubuntu/
    scp ~/.zshrc   alpha:/home/ubuntu/
    scp ~/.tmux_init.sh  alpha:/home/ubuntu/
    scp ~/.zsh_customizations   alpha:/home/ubuntu/

    scp /usr/local/bin/* alpha:/usr/local/bin

    echo "Done!"
}

gs(){
    gitsync "$1" "$2"
}



