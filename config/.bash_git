#!/usr/bin/env bash

## Collection of bash functions I use for work/personal use (don't forget to source this in your main .zshrc/.bashrc/etc)


GIT_LOADED=1


# 'Git Clean' - drop all local changes - head to master, git pull, and restart apache
alias gc="git stash save && git stash drop && git checkout master && git pull && rr && echo 'Cleaned Up!'"

# Add ssh key to agent and push
alias git_force_push="eval \$(ssh-agent -s) && ssh-add ~/.ssh/id_rsa && git push && echo 'Pushed to GitHub!'"

# Shows last 15 merges
alias showmerges="git log --oneline --merges -E --grep 'DEV-[0-9]+' -n 15" 

# Lazygit
alias lg="lazygit" 

git_discard_old_stashes(){
    current=10

    stash_count=$( (expr 0 + $( git stash list | wc -l ) ) )
    echo "Current stash count (keeping latest 10): $stash_count"

    while [ $current -lt $stash_count ]
    do
        echo "In Loop: $current"
        current=$(expr $current + 1)
        output=$(git stash drop stash@{$current})
    done
}

# Re-track current branch to repo
git_reset(){
   git checkout master && git pull && git branch -D ${1} && git checkout --track origin/${1}

}

# Stage and commit
git_addcommit(){
    git add -A && git commit -m "${1}" && echo "Staged and Committed!"
}

git_fixconflict(){
    git checkout master
    git pull
    git branch -D $1 2> /dev/null
    git checkout -b $1
    git pull origin $1 --no-commit
}

git_merge_changes_from_stash(){
    
    # Save thine stash with unique id - epoch
    stash_save_name=$(date +%s | tr -s [:space:])

    git stash save "${stash_save_name}"

    # Remove leading chars we don't need (xargs removes leading/trailing whitespace too)
    current_branch_name=$(git branch | grep '*' | sed s:'*':: | tr -s [:space:] | xargs)

    git checkout master && git pull && git checkout -b "${current_branch_name}-merged-${stash_save_name}" 

    # This is name of stash to additionally apply - blank by default so  you wil be prompted. 
    # Hardcode in a value if you plan to always merge with a certain stash
    stash_name=""

    # If blank then prompt
    [[ "${stash_name}" == "" ]] && read -p "Enter the name of the stash to merge with your current changes: " stash_name

    # Find thine stash index
    stash_num=$(git stash list | grep $stash_name | tr -s [:alpha:] '-' | tr -s [:punct:] '-' | sed -E 's/ |\-//g')

    # Thine Error handling
    [[ "${stash_num}" == "" ]] && echo 'No stash found with that name' && exit 1;

    echo "Found '${stash_name}'. Applying stash..."

    # Apply thine stashes thereof - first apply found stash
    git stash apply --index $stash_num

    # Applying a second stash (our original unstaged code) - can pipe to git apply to bypass git warning of conflicting stashes 
    git stash show -p 0 | git apply
}

git_apply_stash_by_name(){
    stash_name="${1}"

    [[ "${stash_name}" == "" ]] && read -p "Enter the name of your stash: " stash_name

    # get stash index
    stash_num=$(git stash list | grep $stash_name | tr -s [:alpha:] '-' | tr -s [:punct:] '-' | sed -E 's/ |\-//g')

    # Error handling
    [[ "${stash_num}" == "" ]] && echo 'No stash found with that name' && exit 1;

    echo "Found '${stash_name}'. Applying stash..."

    # apply 
    git stash apply --index $stash_num
}



